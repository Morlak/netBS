<?php

namespace Interne\StructureBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AttributionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttributionRepository extends EntityRepository
{	
	
	/**
	 * Recherche l'ensemble des attributions liées à ce groupe durant la plage de temps
	 * fournie
	 */
	 
	public function findAttributionsForThisGroupe($groupe, $date1, $date2) {
		
		/**
		 * Si une des deux dates était empty, on la remplace dans le controller par une date
		 * fictive. Ca peut poser problème avec la date de fin, qui est mise à 01-01-3000
		 * Pour pallier a ce problème, on génère une date plus grande encore, au cas ou c'etait
		 * NULL dans la BDD
		 */
		
		$farAway = new \Datetime('3100-12-12');
		
		$qb = $this->createQueryBuilder('a');
		$qb->where('a.groupe = :groupe')
		   ->setParameter('groupe', $groupe)
		   ->andWhere('DATE(a.dateDebut) < :fin')
	   	   ->setParameter('fin', $date2)
	   	   ->andWhere('ifNull(a.dateFin, :farAway) > :debut')
	   	   ->setParameter('debut', $date1)
		   ->setParameter('farAway', $farAway);
	   	   
	   	return $qb->getQuery()->getResult();
	}
	
	/**
	 * Recherche les attributions courantes encore valides, c'est-à-dire dont
	 * la date de fin est vide ou non expirée
	 */
	public function findCurrentAttributionsForThisGroupe($groupe) {
		
		$fin = new \Datetime();
		
		$qb  = $this->createQueryBuilder('a')
					->where('a.dateFin > :fin')
					->setParameter('fin', $fin)
					->orWhere('a.dateFin is NULL')
					->andWhere('a.groupe = :groupe')
					->setParameter('groupe', $groupe);
		
		return $qb->getQuery()->getResult();
	}
}
