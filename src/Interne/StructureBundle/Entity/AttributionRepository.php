<?php

namespace Interne\StructureBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AttributionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttributionRepository extends EntityRepository
{
	
	/**
	 * Recherche l'ensemble des attributions liées à ce groupe durant la plage de temps
	 * fournie
	 */
	 
	public function findAttributionsForThisGroupe($groupe, $date1, $date2) {
		
		$qb = $this->createQueryBuilder('a');
		$qb->where('a.groupe = :groupe')
		   ->setParameter('groupe', $groupe)
		   ->andWhere('a.dateDebut < :fin')
	   	   ->setParameter('fin', $date2)
	   	   ->andWhere('a.dateFin > :debut')
	   	   ->setParameter('debut', $date1);
	   	   
	   	return $qb->getQuery()->getResult();
	}
	
	/**
	 * Recherche les attributions pour un ensemble de groupes, pas seulement un concerné
	 * en fonction du temps
	 */
	public function findAttributionsForGroupes($groupes, $date1, $date2) {
		
		$qb = $this->createQueryBuilder('a');
		
		//On récupère en premier lieu l'ensemble des attributions concernées par
		//les dates
		$qb->where('a.dateDebut < :fin')
	   	   ->setParameter('fin', $date2)
	   	   ->andWhere('a.dateFin > :debut')
	   	   ->setParameter('debut', $date1);
	   	
	   	$attrs = $qb->getQuery()->getResult();
	   	$liste = array();
	   	$c 	   = 0;
	   	
	   	//On les compare ensuite avec l'ensemble de groupes qu'on a reçu
	   	foreach($attrs as $attribution) {
    		
    		if(in_array($attribution->getGroupe(), $groupes, true)) {
    			
    			$liste[$c] = $attribution;
    			$c++;
    		}
    	}
    	
    	return $liste;
	}
	
	/**
	 * Recherche les attributions courantes encore valides, c'est-à-dire dont
	 * la date de fin est vide ou non expirée
	 */
	public function findCurrentAttributionsForThisGroupe($groupe) {
		
		$fin = new \Datetime();
		
		$qb  = $this->createQueryBuilder('a')
					->where('a.dateFin > :fin')
					->setParameter('fin', $fin)
					->orWhere('a.dateFin is NULL')
					->andWhere('a.groupe = :groupe')
					->setParameter('groupe', $groupe);
		
		return $qb->getQuery()->getResult();
	}
}
