<?php

namespace Interne\StructureBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * GroupeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupeRepository extends EntityRepository
{
	
	/**
	 * la méthode findJsonHierarchie retourne la hierarchie complète prête
	 * à fonctionner dans un pour un groupe donné
	 */
	public function findJsonHierarchie($groupe) {
		
		$hierarchie = array();
		$c = 0;
		
		foreach($groupe->getEnfants() as $enfant) {
			
			$hierarchie[$c]['children'] = $this->findJsonHierarchie($enfant);
			$hierarchie[$c]['li_attr']['groupe_id'] = $enfant->getId();
			$hierarchie[$c]['text'] = $enfant->getNom();
			$hierarchie[$c]['icon'] = '/netBS/web/static/images/layout/group.png';
			$hierarchie[$c]['state'] =  array('opened' => true);
			$c++;
		}
		
		return $hierarchie;
	}
	
	
	/**
	 * La méthode findEnfantsData retourne les informations brutes sur
	 * les groupes, l'id et le nom sans fioriture, pour la transmission
	 * de données
	 */
	public function findEnfantsData($groupe) {
		
		$children = array();
		$c = 0;
		
		foreach($groupe->getEnfants() as $enfant) {
			
			$children[$c]['groupe']    = $enfant->getId() . '_' . $enfant->getNom();
			$children[$c]['children']  = $this->findEnfantsData($enfant);
			
			if(empty($children[$c]['children']))
				unset($children[$c]['children']);
				
			$c++;
		}
		
		return $children;
	}
	
	
	/**
	 * va rechercher la liste des parents complète pour le groupe passé
	 */
	public function findHierarchie($groupe) {

		$hierarchie[0] = $groupe;
		$i 			   = 0;
		
		while($hierarchie[$i]->getParent() !== null)
		{
			$i++;
			$hierarchie[$i] = $hierarchie[$i - 1]->getParent();
		}
		
		
		return array_reverse($hierarchie);
	}
	
	
	/**
	 * Recherche tous les enfants directs et indirects du groupe
	 * passé en paramètre, de manière ordonnée
	 */
	public function findEnfants($groupe) {
		
		$children = array();
		$c = 0;
		
		foreach($groupe->getEnfants() as $enfant) {
			
			$children[$c]['children'] = $this->findEnfants($enfant);
			$children[$c]['groupe'] = $enfant;
			$c++;
		}
		
		return $children;
	}
	
	
	/**
	 * Trouve la liste de tous les enfants directs et indirects
	 * du groupe passé en paramètre
	 */
	public function findEnfantsUnordered($groupe) {
		
		
		$list 		 = $this->findAll();
		$children[0] = $groupe;
		$c 			 = 1;
		$i 			 = 0;
		$amount		 = count($list);
		
		while($i < $amount) {
			
			if(in_array($list[$i]->getParent(), $children, true)) {
				
				if(!in_array($list[$i], $children, true)) {
					
					$children[$c] = $list[$i];
					$i = 0;
					$c++;
				}
				else
					$i++;
			}
			else
				$i++;
		}
		
		return $children;
		
	}
	
	/**
	 * recherche le groupe parent de tout, le seul groupe a ne pas
	 * avoir de groupe parent
	 */
	public function findMainParent() {
		
		$qb = $this->_em->createQueryBuilder();

		$qb->select('g')
			->from('InterneStructureBundle:Groupe', 'g')
			->where('g.parent is NULL');
		
		return $qb->getQuery()
			->getResult();
	}
	
}
