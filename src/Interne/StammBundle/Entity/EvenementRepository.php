<?php

namespace Interne\StammBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EvenementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvenementRepository extends EntityRepository
{
	
	/*
	 * Retourne les événements pour le mois passé en paramètre, ainsi que le mois avant
	 * et celui d'après pour prendre en compte les événements sur plusieurs mois
	 */
	 
	public function findMonthYear($m, $y) {
		
		/*
		 * On crée les deux datetimes qui permettent d'englober la totalité
		 * des événements pour le mois en fonction du mois passé, pour les
		 * changements d'année
		 */
		
		$monthStart = new \DateTime(date($y.'-'.$m.'-01') . " 00:00:00");
		$monthEnd 	= new \DateTime(date($y.'-'.$m.'-t'). " 23:56:56");
		
		$qb  = $this->createQueryBuilder('e');
		$qb->where('e.debut < :end')
		   ->setParameter('start', $monthStart)
		   ->andWhere('e.fin > :start')
	   	   ->setParameter('end', $monthEnd);
	   	    
		return $qb->getQuery()
		          ->getArrayResult();
		   
	}
	
	/**
	 * Retourne la liste des evenements pour le mois courant, et si cette date est à 5
	 * jours du mois suivant, on le charge également
	 */
	public function findEvenementsMonth() {
		
		$month = date('n');
		$day   = date('d');
		$year  = date('Y');
		$days  = $this->days_in_month($month, $year);
		$amnt  = (intval($days) - intval($day) <= 5) ? 2 : 1;
		
		
		$debut = new \Datetime(date('Y-m-01 00:00:00'));
		$fin   = new \Datetime(date('Y' . '-' . ($month + $amnt) . '-28' . '23:56:56'));
		
		$qb = $this->createQueryBuilder('e');
		$qb->where('e.debut < :end')
		   ->setParameter('start', $debut)
		   ->andWhere('e.fin > :start')
	   	   ->setParameter('end', $fin);
	   	    
		return $qb->getQuery()
		          ->getArrayResult();
	}
	
	
	/**
	 * Retourne le nombre d'évènements à venur souhaités pour la catégorie souhaitée
	 * Si la catégorie est laissée nulle, renvoie le nombre toutes catégories confondues'
	 */
	public function findByCategorie($categorie, $amount) {
		
		$now = new \Datetime('now');
		
		$qb = $this->createQueryBuilder('e');
		$qb->where('e.debut > :now')
		   ->setParameter('now', $now)
		   ->andWhere('e.categorie = :categorie')
		   ->setParameter('categorie', $categorie)
		   ->orderBy('e.debut', 'ASC')
		   ->setMaxResults($amount);
		
		return $qb->getQuery()->getArrayResult();
	}
  
  /**
   * remplacement de cal_days_in_month
   */
  function days_in_month($month, $year) { 
    if(checkdate($month, 31, $year)) return 31; 
    if(checkdate($month, 30, $year)) return 30; 
    if(checkdate($month, 29, $year)) return 29; 
    if(checkdate($month, 28, $year)) return 28; 
    return 0; // error 
  }
}
