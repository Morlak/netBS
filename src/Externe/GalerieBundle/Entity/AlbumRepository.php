<?php

namespace Externe\GalerieBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AlbumRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AlbumRepository extends EntityRepository
{
    /**
     * renvoie une liste d'images aléatoires
     */
    public function findRandom() {
        
        $albums = $this->getEntityManager()
        ->createQuery('SELECT COUNT(a.id) FROM ExterneGalerieBundle:Album a')
        ->getSingleScalarResult();
        
        //On prend des albums jusqu'à avoir 30 photos, ou que la boucle ait
        //iteré 15 fois
        $photos = array();
        $exit   = 0;
        
        while(count($photos)  < 31) {
            
            if($exit == 15) exit;
            
            $id     = rand(1, $albums);
            $album  = $this->find($id);
            
            $pics   = $album->getPhotos();
            $chose  = array();
            //On récupère 6 photos par album au maximum
            for($i = 0; $i < 6; $i++) {
                
                $pic = rand(0, count($pics) - 1);
                $chose[$i]['photo']     = urldecode($pics[$pic]['photo']);
                $chose[$i]['thumbnail'] = urldecode($pics[$pic]['thumbnail']);
                $chose[$i]['album']     = $album->getNom() . ' - ' . $album->getDroit()->getGroupe()->getNom();
            }
            
            $photos = array_merge($photos, $chose);
            $exit++;
        }
        
        return $photos;
    }
    
    /**
     * la méthode findPictures retourne la liste des photos pour affichage
     * en fonction de l'id de l'album
     */
    public function findPictures($id) {
        
        $album  = $this->find($id);
        $photos = $album->getPhotos();
        $nom    = $album->getNom() . ' - ' .$album->getDroit()->getGroupe()->getNom();
        $imgs   = array();
        
        for($i = 0; $i < count($photos); $i++) {
            
            $imgs[$i]['photo'] = urldecode($photos[$i]['photo']);
            $imgs[$i]['thumbnail'] = urldecode($photos[$i]['thumbnail']);
            $imgs[$i]['album'] = $nom;
        }
        
        return $imgs;
    }
    
    /**
     * Cette méthode va retourner l'ensemble des albums pour un dossier
     * et un droit donné. Si on prennait seulement le dossier, il pourrait y
     * avoir des problèmes avec les dossiers racine
     */
    public function findAlbumsForThisDroitAndDossier($droit, $dossier) {
        
        $qb = $this->_em->createQueryBuilder();

        if($dossier == null) {
            
            $qb->select('a')
                ->from('ExterneGalerieBundle:Album', 'a')
                ->where('a.droit = :droit')
                ->setParameter('droit', $droit)
                ->andWhere('a.dossier is NULL')
                ;
            
            return $qb->getQuery()
                      ->getResult();
        }
        else {
            
            $qb->select('a')
                ->from('ExterneGalerieBundle:Album', 'a')
                ->where('a.droit = :droit')
                ->setParameter('droit', $droit)
                ->andWhere('a.dossier = :dossier')
                ->setParameter('dossier', $dossier)
                ;
            
            return $qb->getQuery()
                      ->getResult();
        }
    }
}
